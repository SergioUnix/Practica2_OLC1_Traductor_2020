Inicio -> sentencia_clase lista_clasesP  "Ultimo"
lista_clasesP -> sentencia_clase lista_clasesP
				| epsilon

sentencia_clase -> "P_Class" "variable" "{" ListDeclar_metodoFun   "}"

ListDeclar_metodoFun-> Declaracion ListDeclar_metodoFunP
								|epsilon 
ListDeclar_metodoFunP-> Declaracion ListDeclar_metodoFunP
								| epsilon


Declar_dentro_metodoFun-> tipo "variable" DeclaracionP_metodos
										
DeclaracionP_metodos -> Lista_ids asignacion ";"

Instruccion->  Declar_dentro_metodoFun            
 			  |Sentencia_while			  
 			  |Sentencia_for		
 			  |SentenciaImprime		      
 			  |Sentencia_if				  
 			  |SentenciaSwitch_case
 			  |asignacionSimple			  
			  |Sentencia_do_while		
			  |epsilon
			///// los de abajo solo en ciertos casos
			  |Sentencia_return_funciones
			  |Sentencia_continue
			  |sentencia_break



Declaracion-> p_res_void "variable"  "(" opcionMetodoFuncion
			| tipo "variable" DeclaracionP


Sentencia_return_funciones-> p_res_return list_condicional ";"
Sentencia_return_metodos-> p_res_return ";"
sentencia_continue-> p_res_continue	";"
sentencia_break-> p_break ";"
ListaIns_entreLLaves-> "{" Lista_inst "}"

opcionMetodoFuncion-> Tipo "variable"  lista_parametros ")" "{" Lista_inst "}"
					| ")" "{" Lista_inst "}"

lista_parametros -> ","  Tipo "variable"  lista_parametros
			| epsilon



Declaracion-> p_res_void "variable"  "(" opcionMetodoFuncion
			| tipo "variable" DeclaracionP


DeclaracionP ->"(" opcionMetodoFuncion
			  |Lista_ids asignacion ";"

Lista_ids-> "," "variable"  lista_ids
			| epsilon

asignacion'-> "=" expresion 
			| epsilon 



asignacionSimple -> "variable" OpcionAsignacion
OpcionAsignacion->  "="  expresion ";"
				  | "(" sentencia_llama_metodo ";"

sentencia_llama_metodo -> Tipo "variable"  lista_parametros ")" 
					| ")" 

sentencia_llama_metodo -> ")" 
					|  ListaExpresiones ")"




Sentencia_do_while-> p_res_do ListaIns_entreLLaves  palabra_while "(" list_condicional ")" ";"







ListaExpresiones -> expresion Lista_expresionP
Lista_expresionP -> "," expresion Lista_expresionP
		   			|epsilon 


Sentencia_if -> P_if "(" list_condicional ")" ListaIns_entreLLaves else'

else'-> P_else multiplesIf
		|epsilon
multiplesIf -> |  ListaIns_entreLLaves
 			   | sentencia_if
		    

Sentencia_while -> P_while "(" list_condicional ")" ListaIns_entreLLaves

Sentencia_for -> P_for "(" declaracionFOR ";" list_condicional ";" "variable" DecrementoIncremento")" ListaIns_entreLLaves

DecrementoIncremento -> "++"
					   |"--"

declaracionFOR -> Tipo "variable" "=" expresion 
				| id "=" expresion





list_condicional -> expresion ListaExpresionesCondicionalesP
ListaExpresionesCondicionalesP -> "&&"  expresion ListaExpresionesCondicionalesP
								| "||"  expresion ListaExpresionesCondicionalesP
								| epsilon
Tipo -> Int 
		|double 
		|Char 
		|stringg 
		|bool





SentenciaImprime -> P_res_Console "." P_WriteLine "(" expresion' ")" ";"


SentenciaSwitch_case -> P_switch "(" "variable" ")" "{"  ListaCases  Default'   "}"

ListaCases -> case listaCase'
listaCase' -> case listaCase'
			|epsilon

caseP ->p_case opcionCase ":" Lista_inst  sentencia_break

OpcionBreak-> "p_break" ";"  // PREGUNTAR 
			| epsilon

OpcionCase->  numero
			| Cadena
			| char
            | double
            | variable                        
			// ver si se puede bool tambien 

Default' -> P_default ":" Lista_inst  p_break ";"
		|epsilon



Expresion->E  simboloComparacionOpcional 

 simboloComparacionOpcional  ->  ==  E  //el tipo es Comparacion
							 | > E
 							 | < E
							 | <= E //el tipo es Comparacion
 							 | >= E   //el tipo es comparacion
 							 | != E   //el tipo es comparacion
 							 | Epsilon




E-> TE'
E'->+TE'
 |-TE'
 | Epsilon
T-> FT'
T'->*FT'
 | / FT'
 |Epsilon
F-> Decimales
 | Cadena
 | "variable" ExpresionMetodo
 | Html
 | true
 | false
 | Numero
 | caracter
 | !E
 | (Expresion)

ExpresionMetodo -> "(" sentencia_llama_metodo 
					| epsilon
sentencia_llama_metodo -> ListaExpresiones ")"
					| ")"